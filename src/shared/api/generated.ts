/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Spicy
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
import type { BodyType } from './api-instance';
export type ArticlesControllerFindByCategoryParams = {
  page?: number;
  limit?: number;
};

export type ArticlesControllerFindAll200AllOf = {
  data?: ArticleAllResponseDto[];
};

export type ArticlesControllerFindAll200 = ArticlesControllerFindAll200AllOf & PaginateResponseDto;

export type ArticlesControllerFindAllParams = {
  page?: number;
  limit?: number;
};

export type UsersControllerFindAll200AllOf = {
  data?: UserResponseDto[];
};

export type UsersControllerFindAll200 = UsersControllerFindAll200AllOf & PaginateResponseDto;

export type UsersControllerFindAllParams = {
  page?: number;
  limit?: number;
};

export interface DataDto {
  [key: string]: unknown;
}

export interface JsonContentDto {
  data: DataDto;
  id?: string;
  type: string;
}

export interface UpdateArticleDto {
  categories?: string[];
  content?: JsonContentDto[];
  title?: string;
}

export interface ArticleResponseDto {
  author: UserResponseDto[];
  authorId: number;
  categories: CategoryResponseDto[];
  content: JsonContentDto[];
  createdAt: string;
  excerpt: string;
  id: number;
  slug: string;
  title: string;
  updatedAt: string;
}

export type ArticlesControllerFindByCategory200AllOf = {
  data?: ArticleResponseDto[];
};

export type ArticlesControllerFindByCategory200 = ArticlesControllerFindByCategory200AllOf &
  PaginateResponseDto;

export interface CreateArticleDto {
  categories: string[];
  content: JsonContentDto[];
  title: string;
}

export interface UpdateCategoryDto {
  name: string;
}

export interface CategoryResponseDto {
  countArticles: number;
  id: number;
  name: string;
  slug: string;
}

export interface CreateCategoryDto {
  name: string;
}

export interface UserResponseDto {
  email: string;
  id: number;
}

export interface ArticleAllResponseDto {
  author: UserResponseDto[];
  authorId: number;
  categories: CategoryResponseDto[];
  createdAt: string;
  excerpt: string;
  id: number;
  slug: string;
  title: string;
  updatedAt: string;
}

export interface PaginateResponseDto {
  currentPage: number;
  hasNext: boolean;
  hasPrev: boolean;
  totalPages: number;
}

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: number;
  role: string;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface SignUpBodyDto {
  email: string;
  password: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authControllerSignUp = (
  signUpBodyDto: BodyType<SignUpBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signUpBodyDto,
    },
    options,
  );
};

export const authControllerSignIn = (
  signInBodyDto: BodyType<SignInBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signInBodyDto,
    },
    options,
  );
};

export const authControllerSignOut = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/auth/sign-out`, method: 'POST' }, options);
};

export const authControllerGetSessionInfo = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<GetSessionInfoDto>({ url: `/auth/session`, method: 'GET' }, options);
};

export const usersControllerFindAll = (
  params?: UsersControllerFindAllParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<UsersControllerFindAll200>(
    { url: `/users`, method: 'GET', params },
    options,
  );
};

export const categoriesControllerCreate = (
  createCategoryDto: BodyType<CreateCategoryDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CategoryResponseDto>(
    {
      url: `/categories`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createCategoryDto,
    },
    options,
  );
};

export const categoriesControllerFindAll = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<CategoryResponseDto[]>({ url: `/categories`, method: 'GET' }, options);
};

export const categoriesControllerUpdate = (
  id: number,
  updateCategoryDto: BodyType<UpdateCategoryDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CategoryResponseDto>(
    {
      url: `/categories/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateCategoryDto,
    },
    options,
  );
};

export const categoriesControllerDelete = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CategoryResponseDto>(
    { url: `/categories/${id}`, method: 'DELETE' },
    options,
  );
};

export const articlesControllerCreate = (
  createArticleDto: BodyType<CreateArticleDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleResponseDto>(
    {
      url: `/articles`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createArticleDto,
    },
    options,
  );
};

export const articlesControllerFindAll = (
  params?: ArticlesControllerFindAllParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticlesControllerFindAll200>(
    { url: `/articles`, method: 'GET', params },
    options,
  );
};

export const articlesControllerCreateMany = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/articles/init`, method: 'POST' }, options);
};

export const articlesControllerUpdate = (
  id: number,
  updateArticleDto: BodyType<UpdateArticleDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleResponseDto>(
    {
      url: `/articles/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateArticleDto,
    },
    options,
  );
};

export const articlesControllerDelete = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleResponseDto>({ url: `/articles/${id}`, method: 'DELETE' }, options);
};

export const articlesControllerFindOne = (
  slug: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleResponseDto>({ url: `/articles/${slug}`, method: 'GET' }, options);
};

export const articlesControllerFindByCategory = (
  slug: string,
  params?: ArticlesControllerFindByCategoryParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticlesControllerFindByCategory200>(
    { url: `/articles/category/${slug}`, method: 'GET', params },
    options,
  );
};

export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type UsersControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindAll>>
>;
export type CategoriesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerCreate>>
>;
export type CategoriesControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindAll>>
>;
export type CategoriesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>
>;
export type CategoriesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerDelete>>
>;
export type ArticlesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerCreate>>
>;
export type ArticlesControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerFindAll>>
>;
export type ArticlesControllerCreateManyResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerCreateMany>>
>;
export type ArticlesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerUpdate>>
>;
export type ArticlesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerDelete>>
>;
export type ArticlesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerFindOne>>
>;
export type ArticlesControllerFindByCategoryResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerFindByCategory>>
>;
