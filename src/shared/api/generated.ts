/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Spicy
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
import type { BodyType } from './api-instance';
export type ArticlesControllerGetRandomArticlesParams = {
  count?: number;
};

export type ArticlesControllerFindAll200AllOf = {
  data?: ArticleAllResponseDto[];
};

export type ArticlesControllerFindAll200 = ArticlesControllerFindAll200AllOf & PaginateResponseDto;

export type ArticlesControllerFindAllParams = {
  page?: number;
  limit?: number;
  tags?: unknown[];
};

export type UsersControllerFindAll200 = UsersControllerFindAll200AllOf & PaginateResponseDto;

export type UsersControllerFindAllParams = {
  page?: number;
  limit?: number;
};

export type AuthControllerGoogleAuthBody = {
  code?: string;
};

export interface DataDto {
  [key: string]: unknown;
}

export interface JsonContentDto {
  data: DataDto;
  id?: string;
  type: string;
}

export interface UpdateArticleDto {
  categories?: string[];
  content?: JsonContentDto[];
  metaDescription?: string;
  title?: string;
}

export interface CreateArticleDto {
  categories: string[];
  content: JsonContentDto[];
  metaDescription?: string;
  title: string;
}

export interface UpdateCategoryDto {
  metaDescription?: string;
  name?: string;
}

export interface CategoryResponseDto {
  countArticles: number;
  id: number;
  metaDescription?: string;
  name: string;
  slug: string;
}

export interface CreateCategoryDto {
  metaDescription?: string;
  name: string;
}

export interface UserResponseDto {
  email: string;
  id: number;
}

export type UsersControllerFindAll200AllOf = {
  data?: UserResponseDto[];
};

export interface ArticleAllResponseDto {
  author: UserResponseDto[];
  authorId: number;
  categories: CategoryResponseDto[];
  createdAt: string;
  excerpt: string;
  id: number;
  metaDescription?: string;
  slug: string;
  title: string;
  updatedAt: string;
}

export interface ArticleResponseDto {
  author: UserResponseDto[];
  authorId: number;
  categories: CategoryResponseDto[];
  content: JsonContentDto[];
  createdAt: string;
  excerpt: string;
  id: number;
  metaDescription?: string;
  slug: string;
  title: string;
  updatedAt: string;
}

export interface PaginateResponseDto {
  hasNext: boolean;
  hasPrev: boolean;
  limit: number;
  page: number;
  total: number;
}

export type GetSessionInfoDtoRole =
  (typeof GetSessionInfoDtoRole)[keyof typeof GetSessionInfoDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSessionInfoDtoRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: number;
  role: GetSessionInfoDtoRole;
}

export interface VerifyCodeDto {
  code: string;
  email: string;
}

export interface SendCodeDto {
  email: string;
}

export interface SignUpDto {
  email: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authControllerSignUp = (
  signUpDto: BodyType<SignUpDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signUpDto,
    },
    options,
  );
};

export const authControllerSendCode = (
  sendCodeDto: BodyType<SendCodeDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/send-code`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: sendCodeDto,
    },
    options,
  );
};

export const authControllerVerifyCode = (
  verifyCodeDto: BodyType<VerifyCodeDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/verify-code`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: verifyCodeDto,
    },
    options,
  );
};

export const authControllerGoogleAuth = (
  authControllerGoogleAuthBody: BodyType<AuthControllerGoogleAuthBody>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/google`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authControllerGoogleAuthBody,
    },
    options,
  );
};

export const authControllerSignOut = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/auth/sign-out`, method: 'POST' }, options);
};

export const authControllerGetSessionInfo = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<GetSessionInfoDto>({ url: `/auth/session`, method: 'GET' }, options);
};

export const usersControllerFindAll = (
  params?: UsersControllerFindAllParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<UsersControllerFindAll200>(
    { url: `/users`, method: 'GET', params },
    options,
  );
};

export const categoriesControllerCreate = (
  createCategoryDto: BodyType<CreateCategoryDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CategoryResponseDto>(
    {
      url: `/categories`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createCategoryDto,
    },
    options,
  );
};

export const categoriesControllerFindAll = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<CategoryResponseDto[]>({ url: `/categories`, method: 'GET' }, options);
};

export const categoriesControllerUpdate = (
  id: number,
  updateCategoryDto: BodyType<UpdateCategoryDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CategoryResponseDto>(
    {
      url: `/categories/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateCategoryDto,
    },
    options,
  );
};

export const categoriesControllerDelete = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CategoryResponseDto>(
    { url: `/categories/${id}`, method: 'DELETE' },
    options,
  );
};

export const categoriesControllerFindOne = (
  slug: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CategoryResponseDto>(
    { url: `/categories/${slug}`, method: 'GET' },
    options,
  );
};

export const articlesControllerCreate = (
  createArticleDto: BodyType<CreateArticleDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleResponseDto>(
    {
      url: `/articles`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createArticleDto,
    },
    options,
  );
};

export const articlesControllerFindAll = (
  params?: ArticlesControllerFindAllParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticlesControllerFindAll200>(
    { url: `/articles`, method: 'GET', params },
    options,
  );
};

export const articlesControllerUpdate = (
  id: number,
  updateArticleDto: BodyType<UpdateArticleDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleResponseDto>(
    {
      url: `/articles/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateArticleDto,
    },
    options,
  );
};

export const articlesControllerDelete = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleResponseDto>({ url: `/articles/${id}`, method: 'DELETE' }, options);
};

export const articlesControllerGetRandomArticles = (
  params?: ArticlesControllerGetRandomArticlesParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleAllResponseDto[]>(
    { url: `/articles/random`, method: 'GET', params },
    options,
  );
};

export const articlesControllerFindOne = (
  slug: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ArticleResponseDto>({ url: `/articles/${slug}`, method: 'GET' }, options);
};

export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSendCodeResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSendCode>>
>;
export type AuthControllerVerifyCodeResult = NonNullable<
  Awaited<ReturnType<typeof authControllerVerifyCode>>
>;
export type AuthControllerGoogleAuthResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuth>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type UsersControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindAll>>
>;
export type CategoriesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerCreate>>
>;
export type CategoriesControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindAll>>
>;
export type CategoriesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>
>;
export type CategoriesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerDelete>>
>;
export type CategoriesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindOne>>
>;
export type ArticlesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerCreate>>
>;
export type ArticlesControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerFindAll>>
>;
export type ArticlesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerUpdate>>
>;
export type ArticlesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerDelete>>
>;
export type ArticlesControllerGetRandomArticlesResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerGetRandomArticles>>
>;
export type ArticlesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof articlesControllerFindOne>>
>;
